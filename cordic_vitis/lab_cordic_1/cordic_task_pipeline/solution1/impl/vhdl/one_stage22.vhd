-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity one_stage22 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    s_current_cos_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    s_current_cos_V_V_empty_n : IN STD_LOGIC;
    s_current_cos_V_V_read : OUT STD_LOGIC;
    s_current_sin_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    s_current_sin_V_V_empty_n : IN STD_LOGIC;
    s_current_sin_V_V_read : OUT STD_LOGIC;
    s_current_theta_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    s_current_theta_V_V_empty_n : IN STD_LOGIC;
    s_current_theta_V_V_read : OUT STD_LOGIC;
    s_output_cos_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    s_output_cos_V_V_full_n : IN STD_LOGIC;
    s_output_cos_V_V_write : OUT STD_LOGIC;
    s_output_sin_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    s_output_sin_V_V_full_n : IN STD_LOGIC;
    s_output_sin_V_V_write : OUT STD_LOGIC;
    s_output_theta_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    s_output_theta_V_V_full_n : IN STD_LOGIC;
    s_output_theta_V_V_write : OUT STD_LOGIC );
end;


architecture behav of one_stage22 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_383 : STD_LOGIC_VECTOR (9 downto 0) := "1110000011";
    constant ap_const_lv10_7D : STD_LOGIC_VECTOR (9 downto 0) := "0001111101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal s_current_cos_V_V_blk_n : STD_LOGIC;
    signal s_current_sin_V_V_blk_n : STD_LOGIC;
    signal s_current_theta_V_V_blk_n : STD_LOGIC;
    signal s_output_cos_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_reg_175 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_output_sin_V_V_blk_n : STD_LOGIC;
    signal s_output_theta_V_V_blk_n : STD_LOGIC;
    signal tmp_V_122_reg_145 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_V_123_reg_151 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_V_124_reg_157 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_fu_87_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_reg_163 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_13_fu_101_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_13_reg_169 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_V_fu_113_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal c_V_13_fu_129_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_V_fu_118_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_V_13_fu_134_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_V_fu_123_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_V_7_fu_139_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln_fu_77_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1333_s_fu_91_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_condition_122 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (s_current_theta_V_V_empty_n = ap_const_logic_0) or (s_current_sin_V_V_empty_n = ap_const_logic_0) or (s_current_cos_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                r_V_13_reg_169 <= r_V_13_fu_101_p1;
                r_V_reg_163 <= r_V_fu_87_p1;
                tmp_V_122_reg_145 <= s_current_cos_V_V_dout;
                tmp_V_123_reg_151 <= s_current_sin_V_V_dout;
                tmp_V_124_reg_157 <= s_current_theta_V_V_dout;
                tmp_reg_175 <= s_current_theta_V_V_dout(9 downto 9);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, s_current_cos_V_V_empty_n, s_current_sin_V_V_empty_n, s_current_theta_V_V_empty_n, s_output_cos_V_V_full_n, s_output_sin_V_V_full_n, s_output_theta_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (s_current_theta_V_V_empty_n = ap_const_logic_0) or (s_current_sin_V_V_empty_n = ap_const_logic_0) or (s_current_cos_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, s_current_cos_V_V_empty_n, s_current_sin_V_V_empty_n, s_current_theta_V_V_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (s_current_theta_V_V_empty_n = ap_const_logic_0) or (s_current_sin_V_V_empty_n = ap_const_logic_0) or (s_current_cos_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(s_output_cos_V_V_full_n, s_output_sin_V_V_full_n, s_output_theta_V_V_full_n, tmp_reg_175)
    begin
                ap_block_state2 <= (((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_122_assign_proc : process(s_output_cos_V_V_full_n, s_output_sin_V_V_full_n, s_output_theta_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
                ap_condition_122 <= (not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2));
    end process;


    ap_done_assign_proc : process(ap_done_reg, s_output_cos_V_V_full_n, s_output_sin_V_V_full_n, s_output_theta_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
        if ((not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    c_V_13_fu_129_p2 <= std_logic_vector(unsigned(tmp_V_122_reg_145) + unsigned(r_V_13_reg_169));
    c_V_fu_113_p2 <= std_logic_vector(unsigned(tmp_V_122_reg_145) - unsigned(r_V_13_reg_169));

    internal_ap_ready_assign_proc : process(s_output_cos_V_V_full_n, s_output_sin_V_V_full_n, s_output_theta_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
        if ((not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        r_V_13_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1333_s_fu_91_p4),10));

        r_V_fu_87_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_77_p4),10));


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    s_V_13_fu_134_p2 <= std_logic_vector(unsigned(tmp_V_123_reg_151) - unsigned(r_V_reg_163));
    s_V_fu_118_p2 <= std_logic_vector(unsigned(tmp_V_123_reg_151) + unsigned(r_V_reg_163));

    s_current_cos_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, s_current_cos_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_current_cos_V_V_blk_n <= s_current_cos_V_V_empty_n;
        else 
            s_current_cos_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_current_cos_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, s_current_cos_V_V_empty_n, s_current_sin_V_V_empty_n, s_current_theta_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (s_current_theta_V_V_empty_n = ap_const_logic_0) or (s_current_sin_V_V_empty_n = ap_const_logic_0) or (s_current_cos_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_current_cos_V_V_read <= ap_const_logic_1;
        else 
            s_current_cos_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    s_current_sin_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, s_current_sin_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_current_sin_V_V_blk_n <= s_current_sin_V_V_empty_n;
        else 
            s_current_sin_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_current_sin_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, s_current_cos_V_V_empty_n, s_current_sin_V_V_empty_n, s_current_theta_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (s_current_theta_V_V_empty_n = ap_const_logic_0) or (s_current_sin_V_V_empty_n = ap_const_logic_0) or (s_current_cos_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_current_sin_V_V_read <= ap_const_logic_1;
        else 
            s_current_sin_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    s_current_theta_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, s_current_theta_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_current_theta_V_V_blk_n <= s_current_theta_V_V_empty_n;
        else 
            s_current_theta_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_current_theta_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, s_current_cos_V_V_empty_n, s_current_sin_V_V_empty_n, s_current_theta_V_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (s_current_theta_V_V_empty_n = ap_const_logic_0) or (s_current_sin_V_V_empty_n = ap_const_logic_0) or (s_current_cos_V_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_current_theta_V_V_read <= ap_const_logic_1;
        else 
            s_current_theta_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    s_output_cos_V_V_blk_n_assign_proc : process(s_output_cos_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
        if ((((tmp_reg_175 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_reg_175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_output_cos_V_V_blk_n <= s_output_cos_V_V_full_n;
        else 
            s_output_cos_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_output_cos_V_V_din_assign_proc : process(tmp_reg_175, c_V_fu_113_p2, c_V_13_fu_129_p2, ap_condition_122)
    begin
        if ((ap_const_boolean_1 = ap_condition_122)) then
            if ((tmp_reg_175 = ap_const_lv1_1)) then 
                s_output_cos_V_V_din <= c_V_13_fu_129_p2;
            elsif ((tmp_reg_175 = ap_const_lv1_0)) then 
                s_output_cos_V_V_din <= c_V_fu_113_p2;
            else 
                s_output_cos_V_V_din <= "XXXXXXXXXX";
            end if;
        else 
            s_output_cos_V_V_din <= "XXXXXXXXXX";
        end if; 
    end process;


    s_output_cos_V_V_write_assign_proc : process(s_output_cos_V_V_full_n, s_output_sin_V_V_full_n, s_output_theta_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
        if (((not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (tmp_reg_175 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (tmp_reg_175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_output_cos_V_V_write <= ap_const_logic_1;
        else 
            s_output_cos_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    s_output_sin_V_V_blk_n_assign_proc : process(s_output_sin_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
        if ((((tmp_reg_175 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_reg_175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_output_sin_V_V_blk_n <= s_output_sin_V_V_full_n;
        else 
            s_output_sin_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_output_sin_V_V_din_assign_proc : process(tmp_reg_175, s_V_fu_118_p2, s_V_13_fu_134_p2, ap_condition_122)
    begin
        if ((ap_const_boolean_1 = ap_condition_122)) then
            if ((tmp_reg_175 = ap_const_lv1_1)) then 
                s_output_sin_V_V_din <= s_V_13_fu_134_p2;
            elsif ((tmp_reg_175 = ap_const_lv1_0)) then 
                s_output_sin_V_V_din <= s_V_fu_118_p2;
            else 
                s_output_sin_V_V_din <= "XXXXXXXXXX";
            end if;
        else 
            s_output_sin_V_V_din <= "XXXXXXXXXX";
        end if; 
    end process;


    s_output_sin_V_V_write_assign_proc : process(s_output_cos_V_V_full_n, s_output_sin_V_V_full_n, s_output_theta_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
        if (((not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (tmp_reg_175 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (tmp_reg_175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_output_sin_V_V_write <= ap_const_logic_1;
        else 
            s_output_sin_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    s_output_theta_V_V_blk_n_assign_proc : process(s_output_theta_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
        if ((((tmp_reg_175 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_reg_175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_output_theta_V_V_blk_n <= s_output_theta_V_V_full_n;
        else 
            s_output_theta_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_output_theta_V_V_din_assign_proc : process(tmp_reg_175, t_V_fu_123_p2, t_V_7_fu_139_p2, ap_condition_122)
    begin
        if ((ap_const_boolean_1 = ap_condition_122)) then
            if ((tmp_reg_175 = ap_const_lv1_1)) then 
                s_output_theta_V_V_din <= t_V_7_fu_139_p2;
            elsif ((tmp_reg_175 = ap_const_lv1_0)) then 
                s_output_theta_V_V_din <= t_V_fu_123_p2;
            else 
                s_output_theta_V_V_din <= "XXXXXXXXXX";
            end if;
        else 
            s_output_theta_V_V_din <= "XXXXXXXXXX";
        end if; 
    end process;


    s_output_theta_V_V_write_assign_proc : process(s_output_cos_V_V_full_n, s_output_sin_V_V_full_n, s_output_theta_V_V_full_n, ap_CS_fsm_state2, tmp_reg_175)
    begin
        if (((not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (tmp_reg_175 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not((((tmp_reg_175 = ap_const_lv1_1) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_1) and (s_output_cos_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_theta_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_sin_V_V_full_n = ap_const_logic_0)) or ((tmp_reg_175 = ap_const_lv1_0) and (s_output_cos_V_V_full_n = ap_const_logic_0)))) and (tmp_reg_175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_output_theta_V_V_write <= ap_const_logic_1;
        else 
            s_output_theta_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    t_V_7_fu_139_p2 <= std_logic_vector(unsigned(tmp_V_124_reg_157) + unsigned(ap_const_lv10_7D));
    t_V_fu_123_p2 <= std_logic_vector(unsigned(tmp_V_124_reg_157) + unsigned(ap_const_lv10_383));
    trunc_ln1333_s_fu_91_p4 <= s_current_sin_V_V_dout(9 downto 2);
    trunc_ln_fu_77_p4 <= s_current_cos_V_V_dout(9 downto 2);
end behav;
