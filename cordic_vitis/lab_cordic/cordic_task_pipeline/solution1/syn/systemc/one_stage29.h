// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _one_stage29_HH_
#define _one_stage29_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct one_stage29 : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<10> > s_current_cos_V_V_dout;
    sc_in< sc_logic > s_current_cos_V_V_empty_n;
    sc_out< sc_logic > s_current_cos_V_V_read;
    sc_in< sc_lv<10> > s_current_sin_V_V_dout;
    sc_in< sc_logic > s_current_sin_V_V_empty_n;
    sc_out< sc_logic > s_current_sin_V_V_read;
    sc_in< sc_lv<10> > s_current_theta_V_V_dout;
    sc_in< sc_logic > s_current_theta_V_V_empty_n;
    sc_out< sc_logic > s_current_theta_V_V_read;
    sc_out< sc_lv<10> > s_output_cos_V_V_din;
    sc_in< sc_logic > s_output_cos_V_V_full_n;
    sc_out< sc_logic > s_output_cos_V_V_write;
    sc_out< sc_lv<10> > s_output_sin_V_V_din;
    sc_in< sc_logic > s_output_sin_V_V_full_n;
    sc_out< sc_logic > s_output_sin_V_V_write;
    sc_out< sc_lv<10> > s_output_theta_V_V_din;
    sc_in< sc_logic > s_output_theta_V_V_full_n;
    sc_out< sc_logic > s_output_theta_V_V_write;


    // Module declarations
    one_stage29(sc_module_name name);
    SC_HAS_PROCESS(one_stage29);

    ~one_stage29();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > s_current_cos_V_V_blk_n;
    sc_signal< sc_logic > s_current_sin_V_V_blk_n;
    sc_signal< sc_logic > s_current_theta_V_V_blk_n;
    sc_signal< sc_logic > s_output_cos_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_12_reg_164;
    sc_signal< sc_logic > s_output_sin_V_V_blk_n;
    sc_signal< sc_logic > s_output_theta_V_V_blk_n;
    sc_signal< sc_lv<10> > tmp_V_53_reg_135;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<10> > tmp_V_54_reg_141;
    sc_signal< sc_lv<10> > tmp_V_52_reg_147;
    sc_signal< sc_lv<10> > r_V_fu_83_p3;
    sc_signal< sc_lv<10> > r_V_reg_152;
    sc_signal< sc_lv<10> > r_V_6_fu_99_p3;
    sc_signal< sc_lv<10> > r_V_6_reg_158;
    sc_signal< sc_lv<10> > c_V_fu_115_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<10> > c_V_6_fu_125_p2;
    sc_signal< sc_lv<10> > s_V_fu_120_p2;
    sc_signal< sc_lv<10> > s_V_6_fu_130_p2;
    sc_signal< sc_lv<1> > tmp_fu_75_p3;
    sc_signal< sc_lv<1> > tmp_11_fu_91_p3;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< bool > ap_condition_122;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<10> ap_const_lv10_3FF;
    static const sc_lv<10> ap_const_lv10_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_condition_122();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_V_6_fu_125_p2();
    void thread_c_V_fu_115_p2();
    void thread_internal_ap_ready();
    void thread_r_V_6_fu_99_p3();
    void thread_r_V_fu_83_p3();
    void thread_real_start();
    void thread_s_V_6_fu_130_p2();
    void thread_s_V_fu_120_p2();
    void thread_s_current_cos_V_V_blk_n();
    void thread_s_current_cos_V_V_read();
    void thread_s_current_sin_V_V_blk_n();
    void thread_s_current_sin_V_V_read();
    void thread_s_current_theta_V_V_blk_n();
    void thread_s_current_theta_V_V_read();
    void thread_s_output_cos_V_V_blk_n();
    void thread_s_output_cos_V_V_din();
    void thread_s_output_cos_V_V_write();
    void thread_s_output_sin_V_V_blk_n();
    void thread_s_output_sin_V_V_din();
    void thread_s_output_sin_V_V_write();
    void thread_s_output_theta_V_V_blk_n();
    void thread_s_output_theta_V_V_din();
    void thread_s_output_theta_V_V_write();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_11_fu_91_p3();
    void thread_tmp_fu_75_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
