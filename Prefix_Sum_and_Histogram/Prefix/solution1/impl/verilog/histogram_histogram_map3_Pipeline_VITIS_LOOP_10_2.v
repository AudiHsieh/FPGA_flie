// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module histogram_histogram_map3_Pipeline_VITIS_LOOP_10_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        old,
        inputA_address0,
        inputA_ce0,
        inputA_q0,
        hist_address0,
        hist_ce0,
        hist_we0,
        hist_d0,
        hist_address1,
        hist_ce1,
        hist_q1,
        acc_out,
        acc_out_ap_vld,
        old_1_out,
        old_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] old;
output  [9:0] inputA_address0;
output   inputA_ce0;
input  [31:0] inputA_q0;
output  [4:0] hist_address0;
output   hist_ce0;
output   hist_we0;
output  [31:0] hist_d0;
output  [4:0] hist_address1;
output   hist_ce1;
input  [31:0] hist_q1;
output  [31:0] acc_out;
output   acc_out_ap_vld;
output  [4:0] old_1_out;
output   old_1_out_ap_vld;

reg ap_idle;
reg inputA_ce0;
reg hist_ce0;
reg hist_we0;
reg hist_ce1;
reg acc_out_ap_vld;
reg old_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln10_fu_134_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_237;
reg   [0:0] icmp_ln10_reg_237_pp0_iter1_reg;
reg   [31:0] old_5_reg_246;
wire   [0:0] icmp_ln13_fu_168_p2;
reg   [0:0] icmp_ln13_reg_253;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln12_fu_150_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln16_fu_177_p1;
wire   [63:0] zext_ln17_fu_182_p1;
reg   [31:0] old_1_fu_46;
wire    ap_loop_init;
reg   [10:0] i_1_fu_50;
reg   [10:0] ap_sig_allocacmp_i;
wire   [10:0] add_ln10_fu_140_p2;
reg   [31:0] acc_fu_54;
reg   [31:0] ap_sig_allocacmp_acc_load_3;
reg   [31:0] ap_sig_allocacmp_acc_load_4;
wire   [31:0] acc_2_fu_198_p2;
wire    ap_block_pp0_stage0_01001;
wire   [9:0] trunc_ln12_fu_146_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_predicate_op36_store_state3;
reg    ap_enable_operation_36;
reg    ap_enable_state3_pp0_iter2_stage0;
reg    ap_predicate_op39_load_state3;
reg    ap_enable_operation_39;
reg    ap_enable_operation_41;
reg    ap_enable_state4_pp0_iter3_stage0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

histogram_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            acc_fu_54 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            acc_fu_54 <= acc_2_fu_198_p2;
        end else if (((icmp_ln13_reg_253 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            acc_fu_54 <= hist_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln10_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_50 <= add_ln10_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_50 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            old_1_fu_46 <= old;
        end else if (((icmp_ln10_reg_237_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            old_1_fu_46 <= old_5_reg_246;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln10_reg_237 <= icmp_ln10_fu_134_p2;
        icmp_ln10_reg_237_pp0_iter1_reg <= icmp_ln10_reg_237;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_237_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_253 <= icmp_ln13_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_237 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        old_5_reg_246 <= inputA_q0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_237_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        acc_out_ap_vld = 1'b1;
    end else begin
        acc_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_134_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_237_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_acc_load_3 = acc_2_fu_198_p2;
    end else begin
        ap_sig_allocacmp_acc_load_3 = acc_fu_54;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_253 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_acc_load_4 = hist_q1;
    end else begin
        ap_sig_allocacmp_acc_load_4 = acc_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 11'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        hist_ce0 = 1'b1;
    end else begin
        hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        hist_ce1 = 1'b1;
    end else begin
        hist_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_168_p2 == 1'd0) & (icmp_ln10_reg_237_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        hist_we0 = 1'b1;
    end else begin
        hist_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputA_ce0 = 1'b1;
    end else begin
        inputA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_237_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        old_1_out_ap_vld = 1'b1;
    end else begin
        old_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_2_fu_198_p2 = (ap_sig_allocacmp_acc_load_4 + 32'd1);

assign acc_out = acc_fu_54;

assign add_ln10_fu_140_p2 = (ap_sig_allocacmp_i + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_36 = (ap_predicate_op36_store_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_39 = (ap_predicate_op39_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_41 = (icmp_ln13_reg_253 == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state3_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state4_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op36_store_state3 = ((icmp_ln13_fu_168_p2 == 1'd0) & (icmp_ln10_reg_237_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op39_load_state3 = ((icmp_ln13_fu_168_p2 == 1'd0) & (icmp_ln10_reg_237_pp0_iter1_reg == 1'd0));
end

assign hist_address0 = zext_ln16_fu_177_p1;

assign hist_address1 = zext_ln17_fu_182_p1;

assign hist_d0 = ap_sig_allocacmp_acc_load_3;

assign icmp_ln10_fu_134_p2 = ((ap_sig_allocacmp_i == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_168_p2 = ((old_1_fu_46 == old_5_reg_246) ? 1'b1 : 1'b0);

assign inputA_address0 = zext_ln12_fu_150_p1;

assign old_1_out = old_1_fu_46[4:0];

assign trunc_ln12_fu_146_p1 = ap_sig_allocacmp_i[9:0];

assign zext_ln12_fu_150_p1 = trunc_ln12_fu_146_p1;

assign zext_ln16_fu_177_p1 = old_1_fu_46;

assign zext_ln17_fu_182_p1 = old_5_reg_246;

endmodule //histogram_histogram_map3_Pipeline_VITIS_LOOP_10_2
